# -*- coding: utf-8 -*-
"""Iris Flower Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OBdK3BBBi7dvi2uF-dzvBAjQ2yZlHq4s
"""

from sklearn.datasets import load_iris
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

df = pd.read_csv("/content/Iris.csv")
print(df.head())

print(df.info())
print(df.describe())
print(df['Species'].value_counts())

# رسم بياني لاستكشاف العلاقة بين الخصائص
sns.pairplot(df, hue="Species")
plt.show()

X = df.drop(columns=['Id', 'Species'])  # المدخلات (الطول، العرض)
y = df['Species']  # المخرجات (النوع)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(" Accuracy:", accuracy_score(y_test, y_pred))
print(" Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Drop ID column (not useful for prediction)
iris_df = iris.drop('Id', axis=1)

# Features (X) and Target (y)
X = iris_df.drop('Species', axis=1)   # numeric features
y = iris_df['Species']                # target (class)

# Encode categorical target labels (Species)
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
)

# Random Forest Classifier
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

# Predict on test set
y_pred = clf.predict(X_test)

# Accuracy Score
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy Score:", accuracy)

# Accuracy Score and Classification Report
from sklearn.metrics import classification_report

print("Accuracy:", accuracy_score(y_test, y_pred))

# Get the original class names from the LabelEncoder
target_names = label_encoder.classes_

print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=target_names))

# Confusion Matrix
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

conf_matrix = confusion_matrix(y_test, y_pred)

# Heatmap Plot
plt.figure(figsize=(6,4))
sns.heatmap(conf_matrix,
            annot=True,
            cmap='Blues',
            xticklabels=target_names,
            yticklabels=target_names)

plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

import numpy as np

importances = clf.feature_importances_
indices = np.argsort(importances)[::-1]

plt.figure(figsize=(6,4))
sns.barplot(x=importances[indices], y=X.columns[indices], palette="viridis")
plt.title("Feature Importance")
plt.show()

